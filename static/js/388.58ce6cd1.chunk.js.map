{"version":3,"file":"static/js/388.58ce6cd1.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/utilities/object-utils/src/omit.ts","pages/Home.jsx"],"sourcesContent":["import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note ðŸš¨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import { Box, Button, Heading, Image } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { selectIsLoggedIn, selectUser } from 'store/auth/authSelector';\n\nconst Home = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const user = useSelector(selectUser);\n\n  return (\n    <Box>\n      <Box marginTop=\"30px\">\n        {isLoggedIn ? (\n          <Box display=\"block\">\n            <Heading as=\"h3\" size=\"lg\">\n              Hello, {user.email}! &#129303;\n            </Heading>\n            <br />\n            <Heading as=\"h4\" size=\"md\">\n              Welcome to your phonebook.&#128211;\n            </Heading>\n            <Box>\n              <Image src=\"/img/phonebook.jpeg\" />\n            </Box>\n          </Box>\n        ) : (\n          <Box>\n            <Heading as=\"h3\" size=\"lg\" marginBottom=\"20px\">\n              Hello! I'm your phonebook.{' '}\n            </Heading>\n            <Heading as=\"h4\" size=\"md\" marginBottom=\"20px\">\n              Please log in to your account or register.\n            </Heading>\n            <Button colorScheme=\"teal\" variant=\"outline\">\n              <NavLink to=\"/login\">Sign In</NavLink>\n            </Button>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  );\n};\nexport default Home;\n"],"names":["NativeImage","forwardRef","props","ref","htmlWidth","htmlHeight","alt","rest","width","height","displayName","Image","fallbackSrc","fallback","src","srcSet","align","fit","loading","ignoreFallback","crossOrigin","_props$fallbackStrate","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","onLoad","onError","sizes","useState","_useState2","setStatus","useEffect","imageRef","useRef","load","useCallback","flush","img","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","object","_step","keysToOmit","clone","Object","assign","key","_iterator","omit","chakra","as","className","isLoggedIn","useSelector","selectIsLoggedIn","user","selectUser","_jsx","Box","children","marginTop","_jsxs","display","Heading","size","email","marginBottom","Button","colorScheme","variant","NavLink","to"],"sourceRoot":""}