{"version":3,"file":"static/js/184.9546ea12.chunk.js","mappings":"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","sources":["components/Contact/Contact.jsx","store/phoneBook/phoneSelector.jsx","components/ContactList/ContactList.jsx","components/Error/Error.jsx","components/Filter/Filter.jsx","components/SearchForm/SearchForm.jsx","pages/Contacs.jsx"],"sourcesContent":["import { Box, Button, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { delContactThunk } from 'service/fetchContacts';\n\nexport const Contact = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const deleteContact = contactId => {\n    dispatch(delContactThunk(contactId));\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"baseline\"\n      gap=\"10px\"\n      boxShadow=\"base\"\n      p=\"6\"\n      rounded=\"md\"\n      bg=\"white\"\n      margin=\"12px\"\n      maxWidth=\"fit-content\"\n    >\n      <Text as=\"b\">\n        {name}: {number}\n      </Text>\n      <Button\n        colorScheme=\"teal\"\n        variant=\"outline\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </Button>\n    </Box>\n  );\n};\n","export const selectPhoneBookValue = state => state.phoneBook.contacts;\nexport const selectIsLoading = state => state.phoneBook.isLoading;\nexport const selectError = state => state.phoneBook.error;\nexport const selectIsContactAdd = state => state.phoneBook.isContactAdd;\n","import { useEffect } from 'react';\nimport * as React from 'react';\n\nimport { Contact } from 'components/Contact/Contact';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPhoneBookValue } from 'store/phoneBook/phoneSelector';\nimport { selectFilter } from 'store/myFilterSlice';\nimport { getContactsThunk } from 'service/fetchContacts';\nimport { Heading } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const phoneBook = useSelector(selectPhoneBookValue);\n  const filterPhoneBook = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const lowerFilter = filterPhoneBook.toLowerCase();\n  const visibleContacts = phoneBook.filter(({ name }) =>\n    name.toLowerCase().includes(lowerFilter)\n  );\n\n  return (\n    <div>\n      <Heading as=\"h3\" size=\"md\" margin=\"20px\">\n        Your Contacts\n      </Heading>\n      <>\n        {visibleContacts.map(contact => (\n          <Contact contact={contact} key={contact.id} />\n        ))}\n      </>\n    </div>\n  );\n};\n","import { Notify } from 'notiflix';\nimport { useSelector } from 'react-redux';\nimport { selectError } from 'store/auth/authSelector';\n\nconst Error = () => {\n  const error = useSelector(selectError);\n  return <>{Notify.error('Something went wrong', { error })}</>;\n};\n\nexport default Error;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { Box, Heading, Input } from '@chakra-ui/react';\nimport { filterSet, selectFilter } from 'store/myFilterSlice';\n\nexport const Filter = props => {\n  const dispatch = useDispatch();\n  const filterName = useSelector(selectFilter);\n\n  const handleFilter = event => {\n    const { value } = event.currentTarget;\n    dispatch(filterSet(value));\n  };\n  return (\n    <Box paddingLeft=\"15px\">\n      <Heading as=\"h4\" size=\"mb\" marginBottom=\"20px\">\n        Find contacts by name\n      </Heading>\n      <Input\n        variant=\"filled\"\n        type=\"text\"\n        name=\"name\"\n        onChange={handleFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        required\n        placeholder=\"Search your name\"\n        value={filterName}\n        maxWidth=\"320px\"\n      />\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  InputGroup,\n  InputLeftElement,\n  Box,\n} from '@chakra-ui/react';\nimport { PhoneIcon } from '@chakra-ui/icons';\nimport { FiUser } from 'react-icons/fi';\n\nimport {\n  selectIsContactAdd,\n  selectPhoneBookValue,\n} from 'store/phoneBook/phoneSelector';\nimport { Notify } from 'notiflix';\nimport { postContactThunk } from 'service/fetchContacts';\n\nexport const SearchForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const phoneBook = useSelector(selectPhoneBookValue);\n  const isContactAdd = useSelector(selectIsContactAdd);\n\n  useEffect(() => {\n    if (isContactAdd) {\n      reset();\n    }\n  }, [isContactAdd]);\n\n  const onSubmitAddContact = event => {\n    event.preventDefault();\n    const newObj = { name, number };\n\n    if (isNameNew(phoneBook, newObj) !== undefined) {\n      Notify.warning(`${newObj.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(postContactThunk(newObj));\n  };\n\n  const isNameNew = (phoneBook, newObj) => {\n    return phoneBook.find(\n      ({ name }) => name.toLowerCase() === newObj.name.toLowerCase()\n    );\n  };\n\n  const onChangeInput = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Box maxWidth=\"320px\" padding=\"20px\">\n      <form onSubmit={onSubmitAddContact}>\n        <FormControl>\n          <FormLabel>\n            Name\n            <InputGroup>\n              <InputLeftElement pointerEvents=\"none\">\n                <FiUser color=\"gray\" />\n              </InputLeftElement>\n              <Input\n                variant=\"flushed\"\n                type=\"text\"\n                name=\"name\"\n                required\n                placeholder=\"Enter your name\"\n                onChange={onChangeInput}\n                value={name}\n              />\n            </InputGroup>\n          </FormLabel>\n          <FormLabel>\n            Number\n            <InputGroup>\n              <InputLeftElement pointerEvents=\"none\">\n                <PhoneIcon color=\"gray.300\" />\n              </InputLeftElement>\n              <Input\n                variant=\"flushed\"\n                type=\"tel\"\n                name=\"number\"\n                required\n                placeholder=\"Enter your number\"\n                onChange={onChangeInput}\n                value={number}\n                marginBottom=\"20px\"\n              />\n            </InputGroup>\n          </FormLabel>\n          <Button type=\"submit\" marginBottom=\"20px\">\n            Add contacts\n          </Button>\n        </FormControl>\n      </form>\n    </Box>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport Error from 'components/Error/Error';\nimport { Filter } from 'components/Filter/Filter';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useSelector } from 'react-redux';\nimport { selectError } from 'store/auth/authSelector';\nimport {\n  selectIsLoading,\n  selectPhoneBookValue,\n} from 'store/phoneBook/phoneSelector';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const phoneBook = useSelector(selectPhoneBookValue);\n\n  return (\n    <>\n      <div>\n        <SearchForm />\n        <Filter />\n        {error ? <Error /> : <ContactList />}\n\n        {phoneBook.length === 0 && !error && !isLoading && (\n          <h1> You don't have any contacts yet</h1>\n        )}\n      </div>\n    </>\n  );\n};\nexport default Contacts;\n"],"names":["Contact","_ref","contact","id","name","number","dispatch","useDispatch","_jsxs","Box","display","alignItems","gap","boxShadow","p","rounded","bg","margin","maxWidth","children","Text","as","_jsx","Button","colorScheme","variant","onClick","contactId","delContactThunk","selectPhoneBookValue","state","phoneBook","contacts","selectIsLoading","isLoading","selectIsContactAdd","isContactAdd","ContactList","useSelector","filterPhoneBook","selectFilter","useEffect","getContactsThunk","lowerFilter","toLowerCase","visibleContacts","filter","includes","Heading","size","_Fragment","map","error","selectError","Notify","Filter","props","filterName","paddingLeft","marginBottom","Input","type","onChange","event","value","currentTarget","filterSet","pattern","required","placeholder","SearchForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","reset","isNameNew","newObj","find","onChangeInput","_event$currentTarget","padding","onSubmit","preventDefault","undefined","postContactThunk","concat","FormControl","FormLabel","InputGroup","InputLeftElement","pointerEvents","FiUser","color","PhoneIcon","Error","length"],"sourceRoot":""}