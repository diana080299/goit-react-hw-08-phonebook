{"version":3,"file":"static/js/385.638b067d.chunk.js","mappings":"iPAyGA,UAnGe,WACb,IAAAA,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,cAAtBf,EAAIc,EAAJd,KAAMgB,EAAKF,EAALE,MAEd,OAAQhB,GACN,IAAK,OACHC,EAAQe,GACR,MACF,IAAK,QACHX,EAASW,GACT,MACF,IAAK,WACHP,EAAYO,GAMlB,EAQA,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,GAAG,KAAKC,KAAK,KAAKC,aAAa,OAAML,SAAC,aAG/CF,EAAAA,EAAAA,MAAA,QAAMQ,SAXa,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAU,CAAE5B,KAAAA,EAAMI,MAAAA,EAAOI,SAAAA,GAC/BE,GAASmB,EAAAA,EAAAA,IAAcD,GACzB,EAOmCT,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,QAELC,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACJC,QAAQ,UACRC,YAAY,kBACZC,GAAG,OACHC,KAAK,OACLlC,KAAK,OACLgB,MAAOhB,EACPmC,UAAQ,EACRC,SAAUxB,QAGdK,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACJC,QAAQ,UACRC,YAAY,mBACZC,GAAG,QACHC,KAAK,QACLlC,KAAK,QACLgB,MAAOZ,EACPgC,SAAUxB,QAGdK,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,YAELC,EAAAA,EAAAA,KAACU,EAAAA,EAAK,CACJC,QAAQ,UACRC,YAAY,sBACZC,GAAG,WACHC,KAAK,WACLlC,KAAK,WACLgB,MAAOR,EACP2B,UAAQ,EACRC,SAAUxB,EACVY,aAAa,aAGjBJ,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CACLC,YAAY,OACZP,QAAQ,UACRG,KAAK,SACLV,aAAa,OAAML,SACpB,aAGDC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmB,EAAAA,GAAO,CAACC,GAAG,SAAQrB,UAClBF,EAAAA,EAAAA,MAACI,EAAAA,EAAO,CAACC,GAAG,KAAKC,KAAK,KAAIJ,SAAA,CAAC,yCACc,KACvCC,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CAACC,YAAY,OAAOf,KAAK,KAAIJ,SAAC,wBASnD,C,6TCxFA,GAA0DsB,EAAAA,EAAAA,GAExD,CACAzC,KAAM,2BACN0C,aAAc,kHACfC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GALMC,EAAAA,EAAAA,GAA2BC,EAAoB,KA+DtD,GACEJ,EAAAA,EAAAA,GAA0C,CACxCK,QAAQ,EACR9C,KAAM,uBACP+C,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAJIC,EAAAA,EAAAA,GAAqBC,EAAqB,KAsJ1C,IAAMC,GAAcC,EAAAA,EAAAA,IACzB,SAAqBC,EAAOC,GAC1B,IAAMC,GAASC,EAAAA,EAAAA,IAAoB,OAAQH,GAE3C,EApJJ,SAAgCA,GAC9B,IACMI,EAMFJ,EANFnB,GACAwB,EAKEL,EALFK,WACAC,EAIEN,EAJFM,UACAC,EAGEP,EAHFO,WACAC,EAEER,EAFFQ,WACGC,GAAAA,EAAAA,EAAAA,GACDT,EAAAA,GAGEU,GAAOC,EAAAA,EAAAA,SACP9B,EAAKuB,GAAU,SAAVA,OAAmBM,GAExBE,EAAU,GAAVA,OAAa/B,EAAE,UACfgC,EAAa,GAAbA,OAAgBhC,EAAE,aAClBiC,EAAa,GAAbA,OAAgBjC,EAAE,aAMxB,GAA8CpC,EAAAA,EAAAA,WAAS,GAAKC,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArDqE,EAAAA,EAAAA,GAAiBC,EAAkB,KAM1C,GAAsCvE,EAAAA,EAAAA,WAAS,GAAKM,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAA7CkE,EAAAA,EAAAA,GAAaC,EAAc,KAGlC,GAA8BzE,EAAAA,EAAAA,WAAS,GAAKU,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAArCgE,EAAAA,EAAAA,GAAWC,EAAQ,KAEpBC,GAAmBC,EAAAA,EAAAA,cACvB,eAACtB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGuB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1B1C,GAAIiC,GACDd,GAAAA,CAAAA,EAAAA,CAKHC,KAAKuB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLP,GAAe,EACjB,KAAC,GAEH,CAACJ,IAGGY,GAAgBJ,EAAAA,EAAAA,cACpB,eAACtB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGuB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBvB,GAAAA,CAAAA,EAAAA,CACHC,IAAKsB,EACL,cAAcI,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASpB,GAC1B,gBAAgBoB,EAAAA,EAAAA,IAASrB,GACzB,iBAAiBqB,EAAAA,EAAAA,IAASnB,GAC1B3B,QAAiB,IAAbmB,EAAMnB,GAAmBmB,EAAMnB,GAAK+B,EACxCgB,aAA2B,IAAlB5B,EAAM4B,QAAwB5B,EAAM4B,QAAU/C,GAAA,GAEzD,CAACA,EAAI0B,EAAYY,EAAWb,EAAWE,EAAYI,IAG/CiB,GAAuBP,EAAAA,EAAAA,cAC3B,eAACtB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGuB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,4BAC1B1C,GAAIgC,GACDb,GAAAA,CAAAA,EAAAA,CAKHC,KAAKuB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GACLT,GAAmB,EACrB,IACA,YAAa,aAEf,CAACH,IAGGiB,GAAeR,EAAAA,EAAAA,cACnB,eAACtB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGuB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,sCACvBvB,GACAS,GAAAA,CAAAA,EAAAA,CACHR,IAAKsB,EACLQ,KAAM,QACN,cAAcJ,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASpB,GAC1B,gBAAgBoB,EAAAA,EAAAA,IAASrB,GACzB,iBAAiBqB,EAAAA,EAAAA,IAASnB,IAAU,GAEtC,CAACC,EAAWF,EAAYY,EAAWb,EAAWE,IAG1CwB,GAA4BV,EAAAA,EAAAA,cAChC,eAACtB,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAQ,CAAC,EAAGuB,EAAe,UAAfA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAe,8BACvBvB,GAAAA,CAAAA,EAAAA,CACHC,IAAKsB,EACLQ,KAAM,eACN,eAAe,EACfhE,SAAUiC,EAAMjC,UAAY,QAE9B,IAGF,MAAO,CACLsC,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACdY,YAAaA,EACbc,QAAS,kBAAMb,GAAS,EAAI,EAC5Bc,OAAQ,kBAAMd,GAAS,EAAK,EAC5BL,gBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,eAAAA,EACArC,GAAAA,EACA+B,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAY,iBAAAA,EACAQ,qBAAAA,EACAC,aAAAA,EACAJ,cAAAA,EACAM,0BAAAA,EAEJ,CAwBQG,EALaC,EAAAA,EAAAA,IAAiBpC,IAEhC8B,EAAAA,EAAAA,aAEGO,GADQC,EAAX7B,WACG4B,EAAAA,EAAAA,GAAAA,EAAAA,IAGCE,GAAYC,EAAAA,EAAAA,IAAG,sBAAuBxC,EAAMuC,WAElD,OACE,SAAC3C,EAAAA,CAAoBhC,MAAOyE,EAC1BtE,UAAAA,EAAAA,EAAAA,KAACyB,EAAAA,CAA0B5B,MAAOsC,EAChCnC,UAAAA,EAAAA,EAAAA,KAAC0E,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLZ,EAAa,CAAC,EAAG7B,IAAG,IACxBsC,UAAAA,EACAI,MAAOzC,EAAkB,gBAKnC,IAGFJ,EAAY8C,YAAc,eAWI7C,EAAAA,EAAAA,IAC5B,SAAwBC,EAAOC,GAC7B,IAAM4C,EAAQhD,IACRK,EAAST,IACT8C,GAAYC,EAAAA,EAAAA,IAAG,2BAA4BxC,EAAMuC,WACvD,OACE,SAACE,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CAAAA,EACLG,MAAAA,OAAAA,EAAAA,EAAOxB,iBAAiBrB,EAAOC,IAAAA,CAAAA,EAAAA,CACnC0C,MAAOzC,EAAO4C,WACdP,UAAAA,IAGN,IAGaK,YAAc,gB,0QCjQtB,SAASG,EACd/C,GAEA,MAiBK,SACLA,GA5CF,UA8CQ6C,GAAQhD,EAAAA,EAAAA,MAGZhB,EAWEmB,EAXFnB,GACAmE,EAUEhD,EAVFgD,SACAC,EASEjD,EATFiD,SACAlE,EAQEiB,EARFjB,SACAsB,EAOEL,EAPFK,WACAC,EAMEN,EANFM,UACAE,EAKER,EALFQ,WACAD,EAIEP,EAJFO,WACA0B,EAGEjC,EAHFiC,QACAC,EAEElC,EAFFkC,OACGgB,GAAAA,EAAAA,EAAAA,GACDlD,EAAAA,GAEEmD,EAAqBnD,EAAM,oBAC7B,CAACA,EAAM,qBACP,IAGA6C,MAAAA,OAAAA,EAAAA,EAAO9B,mBAAmB8B,MAAAA,OAAAA,EAAAA,EAAOvC,YACnC6C,EAASC,KAAKP,EAAMhC,aAGlBgC,MAAAA,OAAAA,EAAAA,EAAO5B,cACTkC,EAASC,KAAKP,EAAM/B,YAGtB,OAAO,kBACFoC,GAAAA,CAAAA,EAAAA,CACH,mBAAoBC,EAASE,KAAK,WAAQ,EAC1CxE,GAAIA,MAAAA,EAAAA,EAAMgE,MAAAA,OAAAA,EAAAA,EAAOhE,GACjB0B,WAAY,OAAA+C,EAAAA,MAAAA,EAAAA,EAAY/C,GAAZ,EAA0BsC,MAAAA,OAAAA,EAAAA,EAAOtC,WAC7CC,WAAY,OAAA+C,EAAAA,MAAAA,EAAAA,EAAY/C,GAAZ,EAA0BqC,MAAAA,OAAAA,EAAAA,EAAOrC,WAC7CH,WAAY,OAAAmD,EAAAA,MAAAA,EAAAA,EAAYnD,GAAZ,EAA0BwC,MAAAA,OAAAA,EAAAA,EAAOxC,WAC7CC,UAAWA,MAAAA,EAAAA,EAAauC,MAAAA,OAAAA,EAAAA,EAAOvC,UAC/B2B,SAASwB,EAAAA,EAAAA,IAAgBZ,MAAAA,OAAAA,EAAAA,EAAOZ,QAASA,GACzCC,QAAQuB,EAAAA,EAAAA,IAAgBZ,MAAAA,OAAAA,EAAAA,EAAOX,OAAQA,IAE3C,CA3DIwB,CAAoB1D,GADdO,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,UAAWE,EAAAA,EAAAA,WAAYH,EAAAA,EAAAA,WAAe6C,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAG1D,OAAO,kBACFA,GAAAA,CAAAA,EAAAA,CACHF,SAAUzC,EACV0C,SAAUzC,EACVzB,SAAUsB,EACV,gBAAgBsD,EAAAA,EAAAA,IAASrD,GACzB,iBAAiBqD,EAAAA,EAAAA,IAAStD,GAC1B,iBAAiBsD,EAAAA,EAAAA,IAASnD,IAE9B,C,oECOa9B,GAAQqB,EAAAA,EAAAA,IAAgC,SACnDC,EACAC,GAEA,IAAQ2D,EAAsB5D,EAAtB4D,SAAaV,GAAAA,EAAAA,EAAAA,GAASlD,EAAAA,GAExBE,GAASC,EAAAA,EAAAA,IAAoB,QAAS+C,GAEtCW,EAAQd,GADGX,EAAAA,EAAAA,IAAiBc,IAE5BY,GAAatB,EAAAA,EAAAA,IAAG,eAAgBxC,EAAMuC,WAE5C,OACE,SAACE,EAAAA,EAAAA,OAAYoB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,CACX1F,KAAMyF,GACFC,GAAAA,CAAAA,EAAAA,CACJlB,MAAOzC,EAAO2C,MACd5C,IAAAA,EACAsC,UAAWuB,IAGjB,IAEApF,EAAMkE,YAAc,QAGpBlE,EAAMG,GAAK,O","sources":["pages/SighUp.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { Button, Heading, Input } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { postUserThunk } from 'service/fetchAuth';\n\nconst SignUp = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmitUp = e => {\n    e.preventDefault();\n    const newUser = { name, email, password };\n    dispatch(postUserThunk(newUser));\n  };\n\n  return (\n    <>\n      <Heading as=\"h3\" size=\"md\" marginBottom=\"17px\">\n        Sign Up\n      </Heading>\n      <form onSubmit={handleSubmitUp}>\n        <label>\n          Name\n          <Input\n            variant=\"outline\"\n            placeholder=\"Entry your name\"\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            required\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Email\n          <Input\n            variant=\"outline\"\n            placeholder=\"Entry your email\"\n            id=\"email\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </label>\n        <label>\n          Password\n          <Input\n            variant=\"outline\"\n            placeholder=\"Entry your password\"\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            required\n            onChange={handleChange}\n            marginBottom=\"15px\"\n          />\n        </label>\n        <Button\n          colorScheme=\"teal\"\n          variant=\"outline\"\n          type=\"submit\"\n          marginBottom=\"15px\"\n        >\n          Sign Up\n        </Button>\n        <div>\n          <NavLink to=\"/login\">\n            <Heading as=\"h3\" size=\"md\">\n              If you already have an account, please{' '}\n              <Button colorScheme=\"teal\" size=\"xs\">\n                Sign In\n              </Button>\n            </Heading>\n          </NavLink>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default SignUp;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","dispatch","useDispatch","handleChange","event","_event$currentTarget","currentTarget","value","_jsxs","_Fragment","children","_jsx","Heading","as","size","marginBottom","onSubmit","e","preventDefault","newUser","postUserThunk","Input","variant","placeholder","id","type","required","onChange","Button","colorScheme","NavLink","to","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","FormControl","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","useFormControl","disabled","readOnly","rest","labelIds","push","join","_a","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className"],"sourceRoot":""}